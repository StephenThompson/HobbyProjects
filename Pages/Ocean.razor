@page "/ocean"

@inject IJSRuntime JSRuntime;

<div class="container" style="align-items: center; text-align: center; ">
    <div class="text"  style=" padding-left: 20px;">
        <h1>Ocean</h1>
        <p>Below is an example of an ocean simulated using Gerstner Waves.</p>
    </div>

    <div width="512px" height="512px">
    <div id="threejscontainer"/>
    </div>

    <div class="slidecontainer">
    <p>Sun Elevation:</p>
    <input type="range" min="1" max="90" class="slider" @bind="sunElevation" @oninput="ChangeSunDirection" style="display: inline-flex;" >
    </div>

    <div class="slidecontainer">
    <p>Sun Azimuth:</p>
    <input type="range" min="0" max="360" class="slider"  @bind="sunAzimuth" @oninput="ChangeSunDirection" style="display: inline-block;">
    </div>


    <div class="text"  style=" padding-left: 20px; text-align: center;">
        <h1>Controls</h1>
        <table>
            <tbody>
                <tr>
                    <td>Left Mouse</td>
                    <td>Rotate Camera</td>
                </tr>
                <tr>
                    <td>Middle Mouse</td>
                    <td>Zoom In/Out</td>
                </tr>
                <tr>
                    <td>Right Mouse</td>
                    <td>Pan Camera</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>


@code {
    private string sunElevation = "30";
    private string sunAzimuth = "180";

    private async void ChangeSunDirection()
    {        
        if (float.TryParse(sunElevation, out float elevation) && float.TryParse(sunAzimuth, out float azimuth))
        {
            await JSRuntime.InvokeAsync<object>("scene.changeSunDirection", new object[] { elevation, azimuth });
        }
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        await JSRuntime.InvokeVoidAsync("scene.create");
    }
}